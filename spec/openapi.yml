openapi: 3.0.3
info:
  title: GetPaidHQ API
  description: |
    Comprehensive subscription billing platform API supporting traditional subscriptions, 
    usage-based billing, and hybrid models with advanced features like dunning management, 
    multi-currency support, and enterprise-grade security.
  version: 1.0.5
  contact:
    name: GetPaidHQ Support
    url: https://getpaidhq.co
    email: support@getpaidhq.co
  license:
    name: Proprietary
    url: https://getpaidhq.com/terms

servers:
  - url: https://api.getpaidhq.co
    description: Production server
  - url: https://api-test.getpaidhq.co
    description: Test server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

tags:
  - name: Health
    description: Health check endpoints
  - name: Organizations
    description: Organization management
  - name: Customers
    description: Customer management and payment methods
  - name: Products
    description: Product catalog management
  - name: Variants
    description: Product variant management
  - name: Prices
    description: Pricing configuration
  - name: Subscriptions
    description: Subscription lifecycle management
  - name: Orders
    description: Order processing and management
  - name: Carts
    description: Shopping cart management
  - name: Payments
    description: Payment processing and refunds
  - name: Invoices
    description: Invoice generation and management
  - name: Usage
    description: Usage-based billing, metering, and CloudEvents processing
  - name: Meters
    description: Meter management for usage-based billing
  - name: Gateways
    description: Payment gateway management
  - name: Dunning
    description: Failed payment recovery management
  - name: Webhooks
    description: Webhook management and notifications
  - name: Reports
    description: Analytics and reporting
  - name: Settings
    description: Organization settings
  - name: Discounts
    description: Discount management and coupon codes
  - name: Payment Links
    description: Payment link management and usage tracking
  - name: Public Payments
    description: Public payment endpoints accessible via payment links (no authentication required)

paths:
  # Health
  /api/health:
    get:
      tags: [Health]
      summary: Health check
      description: Returns the health status of the API service
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  # Organizations
  /api/organizations:
    post:
      tags: [Organizations]
      summary: Create organization
      description: Create a new organization (used during onboarding)
      operationId: createOrganization
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  
  /api/organizations/api-keys:
    get:
      tags: [Organizations]
      summary: Get organization API keys
      description: Retrieve API keys for the current organization
      operationId: getOrganizationApiKeys
      responses:
        '200':
          description: Organization API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'

  # Customers
  /api/customers:
    get:
      tags: [Customers]
      summary: List customers
      operationId: listCustomers
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
        - name: email
          in: query
          schema:
            type: string
          description: Filter by email address
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Customer'
    post:
      tags: [Customers]
      summary: Create customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Created customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/customers/{id}:
    get:
      tags: [Customers]
      summary: Get customer by ID
      operationId: getCustomer
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/customers/{id}/payment-methods:
    post:
      tags: [Customers]
      summary: Create customer payment method
      operationId: createCustomerPaymentMethod
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentMethodRequest'
      responses:
        '201':
          description: Created payment method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'

  /api/customers/{id}/payment-methods/{pmid}:
    put:
      tags: [Customers]
      summary: Update customer payment method
      operationId: updateCustomerPaymentMethod
      parameters:
        - $ref: '#/components/parameters/CustomerId'
        - name: pmid
          in: path
          required: true
          schema:
            type: string
          description: Payment method ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentMethodRequest'
      responses:
        '200':
          description: Updated payment method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'

  /api/customers/{id}/invoices:
    get:
      tags: [Customers]
      summary: List customer invoices
      operationId: listCustomerInvoices
      parameters:
        - $ref: '#/components/parameters/CustomerId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, sent, paid, overdue, cancelled, refunded]
      responses:
        '200':
          description: List of customer invoices
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Invoice'

  /api/customers/{id}/dunning-history:
    get:
      tags: [Customers]
      summary: Get customer dunning history
      operationId: getCustomerDunningHistory
      parameters:
        - $ref: '#/components/parameters/CustomerId'
      responses:
        '200':
          description: Customer dunning history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DunningCampaign'

  # Products
  /api/products:
    get:
      tags: [Products]
      summary: List products
      operationId: listProducts
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
    post:
      tags: [Products]
      summary: Create product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /api/products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      operationId: getProduct
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    patch:
      tags: [Products]
      summary: Update product
      operationId: updateProduct
      parameters:
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags: [Products]
      summary: Delete product
      operationId: deleteProduct
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '204':
          description: Product deleted

  /api/products/{id}/variants:
    get:
      tags: [Products]
      summary: List product variants
      operationId: listProductVariants
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: List of variants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variant'
    post:
      tags: [Products]
      summary: Create product variant
      operationId: createProductVariant
      parameters:
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVariantRequest'
      responses:
        '201':
          description: Created variant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variant'

  # Variants
  /api/variants/{variantId}:
    get:
      tags: [Variants]
      summary: Get variant by ID
      operationId: getVariant
      parameters:
        - $ref: '#/components/parameters/VariantId'
      responses:
        '200':
          description: Variant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variant'
    put:
      tags: [Variants]
      summary: Update variant
      operationId: updateVariant
      parameters:
        - $ref: '#/components/parameters/VariantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVariantRequest'
      responses:
        '200':
          description: Updated variant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variant'
    delete:
      tags: [Variants]
      summary: Delete variant
      operationId: deleteVariant
      parameters:
        - $ref: '#/components/parameters/VariantId'
      responses:
        '204':
          description: Variant deleted

  /api/variants/{variantId}/prices:
    get:
      tags: [Variants]
      summary: List variant prices
      operationId: listVariantPrices
      parameters:
        - $ref: '#/components/parameters/VariantId'
      responses:
        '200':
          description: List of prices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'

  # Prices
  /api/prices:
    post:
      tags: [Prices]
      summary: Create price
      operationId: createPrice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePriceRequest'
      responses:
        '201':
          description: Created price
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'

  /api/prices/{priceId}:
    get:
      tags: [Prices]
      summary: Get price by ID
      operationId: getPrice
      parameters:
        - $ref: '#/components/parameters/PriceId'
      responses:
        '200':
          description: Price details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
    patch:
      tags: [Prices]
      summary: Update price
      operationId: updatePrice
      parameters:
        - $ref: '#/components/parameters/PriceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePriceRequest'
      responses:
        '200':
          description: Updated price
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
    delete:
      tags: [Prices]
      summary: Delete price
      operationId: deletePrice
      parameters:
        - $ref: '#/components/parameters/PriceId'
      responses:
        '204':
          description: Price deleted

  # Subscriptions
  /api/subscriptions:
    get:
      tags: [Subscriptions]
      summary: List subscriptions
      operationId: listSubscriptions
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortDirection'
        - name: status
          in: query
          schema:
            type: string
            enum: [trial, active, past_due, non_renewing, paused, unpaid, cancelled, pending, expired, completed, error]
        - name: customer_id
          in: query
          schema:
            type: string
          description: Filter by customer ID
      responses:
        '200':
          description: List of subscriptions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Subscription'
    post:
      tags: [Subscriptions]
      summary: Create subscription
      operationId: createSubscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionRequest'
      responses:
        '201':
          description: Created subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/subscriptions/{id}:
    get:
      tags: [Subscriptions]
      summary: Get subscription by ID
      operationId: getSubscription
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
      responses:
        '200':
          description: Subscription details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags: [Subscriptions]
      summary: Update subscription
      description: Update subscription metadata and other mutable fields
      operationId: updateSubscription
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubscriptionRequest'
      responses:
        '200':
          description: Subscription updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/subscriptions/{id}/payments:
    get:
      tags: [Subscriptions]
      summary: List subscription payments
      operationId: listSubscriptionPayments
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of payments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Payment'

  /api/subscriptions/{id}/pause:
    put:
      tags: [Subscriptions]
      summary: Pause subscription
      operationId: pauseSubscription
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PauseSubscriptionRequest'
      responses:
        '200':
          description: Paused subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

  /api/subscriptions/{id}/resume:
    put:
      tags: [Subscriptions]
      summary: Resume subscription
      operationId: resumeSubscription
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeSubscriptionRequest'
      responses:
        '200':
          description: Resumed subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

  /api/subscriptions/{id}/activate:
    put:
      tags: [Subscriptions]
      summary: Activate subscription
      operationId: activateSubscription
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateSubscriptionRequest'
      responses:
        '200':
          description: Activated subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

  /api/subscriptions/{id}/cancel:
    put:
      tags: [Subscriptions]
      summary: Cancel subscription
      operationId: cancelSubscription
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PauseSubscriptionRequest'
      responses:
        '200':
          description: Cancelled subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

  /api/subscriptions/{id}/change-plan:
    put:
      tags: [Subscriptions]
      summary: Change subscription plan
      operationId: changeSubscriptionPlan
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePlanRequest'
      responses:
        '200':
          description: Updated subscription and plan change details
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscription:
                    $ref: '#/components/schemas/Subscription'
                  plan_change:
                    $ref: '#/components/schemas/PlanChange'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/subscriptions/{id}/billing-anchor:
    put:
      tags: [Subscriptions]
      summary: Update subscription billing anchor
      operationId: updateBillingAnchor
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBillingAnchorRequest'
      responses:
        '200':
          description: Updated subscription with proration details
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscription:
                    $ref: '#/components/schemas/Subscription'
                  proration_details:
                    $ref: '#/components/schemas/ProrationDetails'

  /api/subscriptions/{id}/usage:
    get:
      tags: [Usage]
      summary: Get subscription usage
      description: Get usage records for a specific subscription
      operationId: getSubscriptionUsage
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: Start date for usage period
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: End date for usage period
      responses:
        '200':
          description: Usage records for the subscription
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/UsageEventResponse'
                  count:
                    type: integer

  /api/subscriptions/{id}/estimate:
    get:
      tags: [Usage]
      summary: Get usage estimate
      description: Get current billing period usage estimate for a subscription
      operationId: getUsageEstimate
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
      responses:
        '200':
          description: Usage estimate for current billing period
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageEstimateResponse'

  # Meters
  /api/meters:
    get:
      tags: [Meters]
      summary: List meters
      description: Get a list of all meters for usage-based billing
      operationId: listMeters
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of meters
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Meter'
    post:
      tags: [Meters]
      summary: Create meter
      description: Create a new meter for usage-based billing
      operationId: createMeter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMeterRequest'
      responses:
        '201':
          description: Meter created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meter'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/meters/{id}:
    get:
      tags: [Meters]
      summary: Get meter by ID
      description: Get a specific meter by ID
      operationId: getMeter
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Meter ID
      responses:
        '200':
          description: Meter details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meter'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Meters]
      summary: Update meter
      description: Update an existing meter
      operationId: updateMeter
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Meter ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeterRequest'
      responses:
        '200':
          description: Meter updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meter'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Meters]
      summary: Delete meter
      description: Delete a meter
      operationId: deleteMeter
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Meter ID
      responses:
        '204':
          description: Meter deleted
        '404':
          $ref: '#/components/responses/NotFound'


  # Usage-Based Billing
  /api/usage-events:
    post:
      tags: [Usage]
      summary: Record usage via CloudEvents
      description: Record usage events using CloudEvents v1.0 specification (new standard)
      operationId: recordCloudEventUsage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordUsageRequest'
      responses:
        '201':
          description: Usage event recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/usage-records:
    get:
      tags: [Usage]
      summary: List usage records
      operationId: listUsageRecords
      parameters:
        - name: subscription_item_id
          in: query
          required: true
          schema:
            type: string
          description: Subscription item ID to filter by
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of usage records
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UsageRecord'
    post:
      tags: [Usage]
      summary: Record usage
      description: Record a single usage event for billing
      operationId: recordUsage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordUsageRequest'
      responses:
        '201':
          description: Usage recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageRecord'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/usage-records/batch:
    post:
      tags: [Usage]
      summary: Batch record usage
      description: Record multiple usage events in a single request
      operationId: batchRecordUsage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchRecordUsageRequest'
      responses:
        '201':
          description: Usage records created
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/UsageRecord'
                  total_count:
                    type: integer

  /api/usage-records/{id}:
    get:
      tags: [Usage]
      summary: Get usage record by ID
      operationId: getUsageRecord
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Usage record ID
      responses:
        '200':
          description: Usage record details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageRecord'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Usage]
      summary: Delete usage record
      description: Delete a usage record (for corrections, only allowed if not processed)
      operationId: deleteUsageRecord
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Usage record ID
      responses:
        '204':
          description: Usage record deleted
        '400':
          description: Cannot delete processed usage record

  /api/subscription-items/{id}/usage-summary:
    get:
      tags: [Usage]
      summary: Get usage summary
      description: Get aggregated usage summary for a subscription item
      operationId: getUsageSummary
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Subscription item ID
        - name: start_date
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Usage summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageSummary'

  # Orders
  /api/orders:
    get:
      tags: [Orders]
      summary: List orders
      operationId: listOrders
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, failed, refunded, partial_refund, completed, expired, cancelled, fraudulent]
        - name: customer_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
    post:
      tags: [Orders]
      summary: Create order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /api/orders/{id}:
    get:
      tags: [Orders]
      summary: Get order by ID
      operationId: getOrder
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /api/orders/{id}/complete:
    post:
      tags: [Orders]
      summary: Complete order
      operationId: completeOrder
      parameters:
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteOrderRequest'
      responses:
        '200':
          description: Order completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /api/orders/{id}/subscriptions:
    get:
      tags: [Orders]
      summary: List order subscriptions
      operationId: listOrderSubscriptions
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: List of subscriptions created from this order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'

  # Shopping Cart
  /api/carts/{id}/add:
    post:
      tags: [Carts]
      summary: Add item to cart
      operationId: addCartItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Cart ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartItemRequest'
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/carts/{id}/remove:
    post:
      tags: [Carts]
      summary: Remove item from cart
      operationId: removeCartItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Cart ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCartItemRequest'
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/carts/{id}/validate-coupon:
    post:
      tags: [Carts]
      summary: Validate coupon code for cart
      description: Validates a coupon code and applies it to the cart if valid
      operationId: validateCartCoupon
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Cart ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateCouponRequest'
      responses:
        '200':
          description: Coupon validated and applied to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '400':
          description: Invalid coupon code
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid coupon code"
                  message:
                    type: string
                    example: "Coupon code has expired"

  # Payments
  /api/payments:
    get:
      tags: [Payments]
      summary: List payments
      operationId: listPayments
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, failed, succeeded, refunded, partial_refund, cancelled, expired, fraudulent]
        - name: customer_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of payments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Payment'

  /api/payments/{id}:
    get:
      tags: [Payments]
      summary: Get payment by ID
      operationId: getPayment
      parameters:
        - $ref: '#/components/parameters/PaymentId'
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

  /api/payments/{id}/refund:
    post:
      tags: [Payments]
      summary: Refund payment
      operationId: refundPayment
      parameters:
        - $ref: '#/components/parameters/PaymentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundPaymentRequest'
      responses:
        '200':
          description: Refund processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'

  /api/payment-methods/{id}:
    get:
      tags: [Payments]
      summary: Get payment method by ID
      operationId: getPaymentMethod
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Payment method ID
      responses:
        '200':
          description: Payment method details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'

  # Invoices
  /api/invoices:
    get:
      tags: [Invoices]
      summary: List invoices
      operationId: listInvoices
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, sent, paid, overdue, cancelled, refunded]
        - name: customer_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of invoices
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Invoice'
    post:
      tags: [Invoices]
      summary: Create invoice
      operationId: createInvoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceRequest'
      responses:
        '201':
          description: Created invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'

  /api/invoices/{id}:
    get:
      tags: [Invoices]
      summary: Get invoice by ID
      operationId: getInvoice
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      responses:
        '200':
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
    put:
      tags: [Invoices]
      summary: Update invoice
      operationId: updateInvoice
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInvoiceRequest'
      responses:
        '200':
          description: Updated invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'

  /api/invoices/{id}/actions:
    post:
      tags: [Invoices]
      summary: Perform invoice action
      operationId: performInvoiceAction
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action]
              properties:
                action:
                  type: string
                  enum: [send, finalize, void, mark_paid]
                  description: Action to perform on invoice
      responses:
        '200':
          description: Action performed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'

  /api/invoices/{id}/line-items:
    get:
      tags: [Invoices]
      summary: List invoice line items
      operationId: listInvoiceLineItems
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      responses:
        '200':
          description: List of line items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceLineItem'
    post:
      tags: [Invoices]
      summary: Add line item to invoice
      operationId: addInvoiceLineItem
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceLineItemRequest'
      responses:
        '200':
          description: Line item added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceLineItem'

  /api/invoices/{id}/line-items/{lineItemId}:
    put:
      tags: [Invoices]
      summary: Update invoice line item
      operationId: updateInvoiceLineItem
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
        - name: lineItemId
          in: path
          required: true
          schema:
            type: string
          description: Line item ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInvoiceLineItemRequest'
      responses:
        '200':
          description: Line item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceLineItem'
    delete:
      tags: [Invoices]
      summary: Delete invoice line item
      operationId: deleteInvoiceLineItem
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
        - name: lineItemId
          in: path
          required: true
          schema:
            type: string
          description: Line item ID
      responses:
        '200':
          description: Line item deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"

  /api/invoices/{id}/history:
    get:
      tags: [Invoices]
      summary: List invoice history
      operationId: listInvoiceHistory
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      responses:
        '200':
          description: List of history entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceHistory'

  /api/invoices/{id}/pdf:
    post:
      tags: [Invoices]
      summary: Generate invoice PDF
      operationId: generateInvoicePdf
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      responses:
        '200':
          description: PDF generated
          content:
            application/pdf:
              schema:
                type: string
                format: binary

  /api/invoices/{id}/payment-link:
    post:
      tags: [Invoices]
      summary: Create payment link for invoice
      description: Creates a single-use payment link for a specific invoice with optional customization
      operationId: createInvoicePaymentLink
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoicePaymentLinkRequest'
      responses:
        '201':
          description: Payment link created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinkResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/invoices/{id}/initiate-payment:
    post:
      tags: [Invoices]
      summary: Initiate payment for invoice
      description: Initiates payment for an invoice using a specified payment processor. Creates an order from the invoice and returns payment initialization details.
      operationId: initiateInvoicePayment
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateInvoicePaymentRequest'
      responses:
        '200':
          description: Payment initiation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiatePaymentResponse'
        '400':
          description: Bad request - invalid payment processor, invoice already paid, or cancelled invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal error during payment initiation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  # Dunning Management
  /api/dunning/campaigns:
    get:
      tags: [Dunning]
      summary: List dunning campaigns
      operationId: listDunningCampaigns
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          schema:
            type: string
            enum: [active, paused, completed]
        - name: subscription_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of dunning campaigns
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DunningCampaign'

  /api/dunning/campaigns/{id}:
    get:
      tags: [Dunning]
      summary: Get dunning campaign by ID
      operationId: getDunningCampaign
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Campaign ID
      responses:
        '200':
          description: Campaign details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DunningCampaign'
    patch:
      tags: [Dunning]
      summary: Update dunning campaign
      operationId: updateDunningCampaign
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Campaign ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDunningCampaignRequest'
      responses:
        '200':
          description: Updated campaign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DunningCampaign'

  /api/dunning/campaigns/{id}/attempts:
    get:
      tags: [Dunning]
      summary: List campaign attempts
      operationId: listCampaignAttempts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Campaign ID
      responses:
        '200':
          description: List of attempts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DunningAttempt'
    post:
      tags: [Dunning]
      summary: Trigger manual attempt
      operationId: triggerManualAttempt
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Campaign ID
      responses:
        '200':
          description: Attempt triggered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DunningAttempt'

  /api/dunning/campaigns/{id}/communications:
    get:
      tags: [Dunning]
      summary: List campaign communications
      operationId: listCampaignCommunications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Campaign ID
      responses:
        '200':
          description: List of communications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DunningCommunication'

  /api/dunning/configurations:
    get:
      tags: [Dunning]
      summary: List dunning configurations
      operationId: listDunningConfigurations
      responses:
        '200':
          description: List of configurations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DunningConfiguration'
    post:
      tags: [Dunning]
      summary: Create dunning configuration
      operationId: createDunningConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDunningConfigurationRequest'
      responses:
        '201':
          description: Created configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DunningConfiguration'

  /api/dunning/configurations/{id}:
    get:
      tags: [Dunning]
      summary: Get dunning configuration by ID
      operationId: getDunningConfiguration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Configuration ID
      responses:
        '200':
          description: Configuration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DunningConfiguration'
    patch:
      tags: [Dunning]
      summary: Update dunning configuration
      operationId: updateDunningConfiguration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Configuration ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDunningConfigurationRequest'
      responses:
        '200':
          description: Updated configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DunningConfiguration'

  # Payment Tokens
  /api/payment-tokens/verify:
    post:
      tags: [Dunning]
      summary: Verify payment token
      operationId: verifyPaymentToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyPaymentTokenRequest'
      responses:
        '200':
          description: Token verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTokenVerification'

  /api/payment-tokens/activate:
    post:
      tags: [Dunning]
      summary: Activate payment token
      operationId: activatePaymentToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivatePaymentTokenRequest'
      responses:
        '200':
          description: Token activated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "activated"

  /api/admin/subscriptions/{id}/payment-tokens:
    post:
      tags: [Dunning]
      summary: Create payment token for subscription
      operationId: createSubscriptionPaymentToken
      parameters:
        - $ref: '#/components/parameters/SubscriptionId'
      responses:
        '201':
          description: Payment token created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentToken'

  # Webhooks
  /api/webhooks:
    get:
      tags: [Webhooks]
      summary: List webhook subscriptions
      operationId: listWebhooks
      responses:
        '200':
          description: List of webhook subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookSubscription'
    post:
      tags: [Webhooks]
      summary: Create webhook subscription
      operationId: createWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '201':
          description: Webhook subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscription'

  /api/notify:
    post:
      tags: [Webhooks]
      summary: Process webhooks
      description: Internal endpoint for processing webhook notifications
      operationId: processWebhooks
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Webhook processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "processed"

  /api/notify/cdc:
    post:
      tags: [Webhooks]
      summary: Process CDC webhooks
      description: Internal endpoint for processing Change Data Capture webhooks
      operationId: processCdcWebhooks
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: CDC webhook processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "processed"

  # Discounts
  /api/discounts:
    get:
      tags: [Discounts]
      summary: List discounts
      operationId: listDiscounts
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: active
          in: query
          schema:
            type: boolean
          description: Filter by active status
        - name: type
          in: query
          schema:
            type: string
            enum: [fixed, percentage]
          description: Filter by discount type
        - name: recurring
          in: query
          schema:
            type: string
            enum: [once, forever, cycles]
          description: Filter by recurring type
      responses:
        '200':
          description: List of discounts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Discount'
    post:
      tags: [Discounts]
      summary: Create discount
      operationId: createDiscount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDiscountRequest'
      responses:
        '201':
          description: Created discount
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/discounts/{id}:
    get:
      tags: [Discounts]
      summary: Get discount by ID
      operationId: getDiscount
      parameters:
        - $ref: '#/components/parameters/DiscountId'
      responses:
        '200':
          description: Discount details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Discounts]
      summary: Update discount
      operationId: updateDiscount
      parameters:
        - $ref: '#/components/parameters/DiscountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDiscountRequest'
      responses:
        '200':
          description: Updated discount
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
    delete:
      tags: [Discounts]
      summary: Delete discount
      operationId: deleteDiscount
      parameters:
        - $ref: '#/components/parameters/DiscountId'
      responses:
        '204':
          description: Discount deleted
        '404':
          $ref: '#/components/responses/NotFound'

  # Payment Links
  /api/payment-links:
    get:
      tags: [Payment Links]
      summary: List payment links
      operationId: listPaymentLinks
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          description: Filter by payment link status
          schema:
            type: string
            enum: [active, inactive, expired, used]
        - name: slug
          in: query
          description: Filter by slug (partial match)
          schema:
            type: string
      responses:
        '200':
          description: List of payment links
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinkListResponse'
    post:
      tags: [Payment Links]
      summary: Create payment link
      operationId: createPaymentLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentLinkRequest'
      responses:
        '201':
          description: Payment link created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinkResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/payment-links/{id}:
    get:
      tags: [Payment Links]
      summary: Get payment link by ID
      operationId: getPaymentLink
      parameters:
        - $ref: '#/components/parameters/PaymentLinkId'
      responses:
        '200':
          description: Payment link details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinkResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Payment Links]
      summary: Update payment link
      operationId: updatePaymentLink
      parameters:
        - $ref: '#/components/parameters/PaymentLinkId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentLinkRequest'
      responses:
        '200':
          description: Payment link updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinkResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Payment Links]
      summary: Delete payment link
      operationId: deletePaymentLink
      parameters:
        - $ref: '#/components/parameters/PaymentLinkId'
      responses:
        '204':
          description: Payment link deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /api/payment-links/slug/{slug}:
    get:
      tags: [Payment Links]
      summary: Get payment link by slug
      operationId: getPaymentLinkBySlug
      parameters:
        - name: slug
          in: path
          required: true
          description: The payment link slug
          schema:
            type: string
      responses:
        '200':
          description: Payment link details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinkResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/payment-links/{id}/usage:
    get:
      tags: [Payment Links]
      summary: List payment link usage records
      operationId: listPaymentLinkUsages
      parameters:
        - $ref: '#/components/parameters/PaymentLinkId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: event_type
          in: query
          description: Filter by event type
          schema:
            type: string
        - name: start_date
          in: query
          description: Filter from this date (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          description: Filter to this date (ISO 8601)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of payment link usage records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinkUsageListResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/payment-links/usage:
    post:
      tags: [Payment Links]
      summary: Record payment link usage
      operationId: recordPaymentLinkUsage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordPaymentLinkUsageRequest'
      responses:
        '201':
          description: Usage recorded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinkUsageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/payment-links/usage/{id}:
    get:
      tags: [Payment Links]
      summary: Get payment link usage record
      operationId: getPaymentLinkUsage
      parameters:
        - name: id
          in: path
          required: true
          description: The usage record ID
          schema:
            type: string
      responses:
        '200':
          description: Usage record details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinkUsageResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # Public Payments (no authentication required)
  /api/pay/{slug}:
    get:
      tags: [Public Payments]
      summary: Get payment details
      description: |
        Retrieve payment details for a payment link by slug. This endpoint is publicly accessible
        and requires a valid token query parameter for access validation.
      operationId: getPublicPaymentDetails
      security: []
      parameters:
        - name: slug
          in: path
          required: true
          description: The payment link slug identifier
          schema:
            type: string
        - name: token
          in: query
          required: true
          description: Access token for payment link validation
          schema:
            type: string
      responses:
        '200':
          description: Payment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicPaymentDetailsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Payment link not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /api/pay/{slug}/create-order:
    post:
      tags: [Public Payments]
      summary: Create order from payment link
      description: |
        Create a new order from a payment link. This endpoint handles both invoice payments
        and checkout scenarios. It requires a valid token for access validation.
      operationId: createPublicPaymentOrder
      security: []
      parameters:
        - name: slug
          in: path
          required: true
          description: The payment link slug identifier
          schema:
            type: string
        - name: token
          in: query
          required: true
          description: Access token for payment link validation
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicCreateOrderRequest'
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Payment link not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /api/pay/{slug}/order/{orderId}/status:
    get:
      tags: [Public Payments]
      summary: Get order status
      description: |
        Retrieve the current status of an order created through a payment link.
        This endpoint is publicly accessible with token validation.
      operationId: getPublicOrderStatus
      security: []
      parameters:
        - name: slug
          in: path
          required: true
          description: The payment link slug identifier
          schema:
            type: string
        - name: orderId
          in: path
          required: true
          description: The order ID
          schema:
            type: string
        - name: token
          in: query
          required: true
          description: Access token for payment link validation
          schema:
            type: string
      responses:
        '200':
          description: Order status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicOrderStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Order not found or payment link not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  # Reports & Analytics
  /api/reports/revenue/mrr:
    get:
      tags: [Reports]
      summary: Monthly Recurring Revenue
      operationId: getMrr
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: MRR data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueReport'

  /api/reports/revenue/arr:
    get:
      tags: [Reports]
      summary: Annual Recurring Revenue
      operationId: getArr
      parameters:
        - name: year
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: ARR data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueReport'

  /api/reports/active-subscribers:
    get:
      tags: [Reports]
      summary: Active subscribers count
      operationId: getActiveSubscribers
      parameters:
        - name: date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Active subscribers data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberReport'

  /api/reports/refunds:
    get:
      tags: [Reports]
      summary: Refund totals
      operationId: getRefundTotals
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Refund data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundReport'

  /api/reports/churn/totals:
    get:
      tags: [Reports]
      summary: Customer churn totals
      operationId: getChurnTotals
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Churn totals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChurnReport'

  /api/reports/churn/rates:
    get:
      tags: [Reports]
      summary: Customer churn rates
      operationId: getChurnRates
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [monthly, quarterly, yearly]
      responses:
        '200':
          description: Churn rates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChurnReport'

  # Settings
  /api/settings/{parent_id}:
    get:
      tags: [Settings]
      summary: List settings
      operationId: listSettings
      parameters:
        - name: parent_id
          in: path
          required: true
          schema:
            type: string
          description: Parent ID (organization ID)
      responses:
        '200':
          description: List of settings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Setting'
    post:
      tags: [Settings]
      summary: Create setting
      operationId: createSetting
      parameters:
        - name: parent_id
          in: path
          required: true
          schema:
            type: string
          description: Parent ID (organization ID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSettingRequest'
      responses:
        '201':
          description: Setting created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'

  /api/settings/{parent_id}/{id}:
    get:
      tags: [Settings]
      summary: Get setting by ID
      operationId: getSetting
      parameters:
        - name: parent_id
          in: path
          required: true
          schema:
            type: string
          description: Parent ID (organization ID)
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Setting ID
      responses:
        '200':
          description: Setting details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
    put:
      tags: [Settings]
      summary: Update setting
      operationId: updateSetting
      parameters:
        - name: parent_id
          in: path
          required: true
          schema:
            type: string
          description: Parent ID (organization ID)
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Setting ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSettingRequest'
      responses:
        '200':
          description: Setting updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
    delete:
      tags: [Settings]
      summary: Delete setting
      operationId: deleteSetting
      parameters:
        - name: parent_id
          in: path
          required: true
          schema:
            type: string
          description: Parent ID (organization ID)
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Setting ID
      responses:
        '204':
          description: Setting deleted

  # Gateways
  /api/gateways:
    get:
      tags: [Gateways]
      summary: List payment gateways
      operationId: listGateways
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of gateways
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Gateway'
    post:
      tags: [Gateways]
      summary: Create payment gateway
      operationId: createGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGatewayRequest'
      responses:
        '201':
          description: Gateway created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'

  /api/gateways/{id}:
    get:
      tags: [Gateways]
      summary: Get gateway by ID
      operationId: getGateway
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Gateway ID
      responses:
        '200':
          description: Gateway details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Gateways]
      summary: Update gateway
      operationId: updateGateway
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Gateway ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGatewayRequest'
      responses:
        '200':
          description: Gateway updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Gateways]
      summary: Delete gateway
      operationId: deleteGateway
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Gateway ID
      responses:
        '204':
          description: Gateway deleted
        '404':
          $ref: '#/components/responses/NotFound'

  # Sessions
  /api/sessions:
    post:
      tags: [Sessions]
      summary: Create session
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: API key authentication
    BearerAuth:
      type: http
      scheme: bearer
      description: Bearer token authentication

  parameters:
    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Page number (0-based)
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
      description: Number of items per page
    SortBy:
      name: sort_by
      in: query
      schema:
        type: string
      description: Field to sort by
    SortDirection:
      name: sort_order
      in: query
      schema:
        type: string
        enum: [asc, desc]
        default: desc
      description: Sort direction
    SubscriptionId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Subscription ID
    CustomerId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Customer ID
    ProductId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Product ID
    VariantId:
      name: variantId
      in: path
      required: true
      schema:
        type: string
      description: Variant ID
    PriceId:
      name: priceId
      in: path
      required: true
      schema:
        type: string
      description: Price ID
    OrderId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Order ID
    PaymentId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Payment ID
    InvoiceId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Invoice ID
    DiscountId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Discount ID
    PaymentLinkId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Payment Link ID

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiError'
              - type: object
                properties:
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string

  schemas:
    # Common schemas
    ListResponse:
      type: object
      properties:
        data:
          type: array
          items: {}
        meta:
          $ref: '#/components/schemas/Meta'

    Meta:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Items per page

    ApiError:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          description: Error code
          enum: [bad_request, authentication_error, not_found, validation_error, internal_error]
        message:
          type: string
          description: Human-readable error message
        details:
          oneOf:
            - type: object
            - type: string
          description: Additional error details

    Address:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        line1:
          type: string
          description: Address line 1
        line2:
          type: string
          description: Address line 2
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        country:
          type: string
          pattern: '^[A-Z]{2}$'
          description: ISO 3166-1 alpha-2 country code

    # Discount schemas
    Discount:
      type: object
      properties:
        id:
          type: string
          description: Unique discount identifier
        org_id:
          type: string
          description: Organization identifier
        name:
          type: string
          description: Discount name
        type:
          type: string
          enum: [fixed, percentage]
          description: Discount type
        value:
          type: integer
          description: Discount value (amount in smallest currency unit for fixed, percentage 0-100 for percentage)
        code:
          type: string
          description: Discount code (optional)
        starts_at:
          type: string
          format: date-time
          description: Discount validity start date
        ends_at:
          type: string
          format: date-time
          description: Discount validity end date
        max_redemptions:
          type: integer
          description: Maximum number of redemptions allowed
        recurring:
          type: string
          enum: [once, forever, cycles]
          description: Discount recurring behavior
        cycles:
          type: integer
          description: Number of billing cycles (for recurring=cycles)
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: ISO 4217 currency code (required for fixed discounts)
        active:
          type: boolean
          description: Whether the discount is active
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata

    DiscountRedemption:
      type: object
      properties:
        id:
          type: string
          description: Unique redemption identifier
        org_id:
          type: string
          description: Organization identifier
        discount_id:
          type: string
          description: Associated discount ID
        customer_id:
          type: string
          description: Customer who redeemed the discount
        resource_type:
          type: string
          enum: [subscription, invoice, payment, checkout_session]
          description: Type of resource the discount was applied to
        resource_id:
          type: string
          description: ID of the resource the discount was applied to
        discount_amount:
          type: integer
          description: Amount saved in smallest currency unit
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: ISO 4217 currency code
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata

    CreateDiscountRequest:
      type: object
      required: [name, type, value, recurring]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Discount name
        type:
          type: string
          enum: [fixed, percentage]
          description: Discount type
        value:
          type: integer
          minimum: 1
          description: Discount value (amount in smallest currency unit for fixed, percentage 0-100 for percentage)
        code:
          type: string
          pattern: '^[A-Z0-9_-]+$'
          minLength: 1
          maxLength: 50
          description: Discount code (optional, will be normalized to uppercase)
        starts_at:
          type: string
          format: date-time
          description: Discount validity start date
        ends_at:
          type: string
          format: date-time
          description: Discount validity end date
        max_redemptions:
          type: integer
          minimum: 1
          description: Maximum number of redemptions allowed
        recurring:
          type: string
          enum: [once, forever, cycles]
          description: Discount recurring behavior
        cycles:
          type: integer
          minimum: 1
          description: Number of billing cycles (required when recurring=cycles)
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: ISO 4217 currency code (required for fixed discounts)
        active:
          type: boolean
          default: true
          description: Whether the discount is active
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata

    UpdateDiscountRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Discount name
        code:
          type: string
          pattern: '^[A-Z0-9_-]+$'
          minLength: 1
          maxLength: 50
          description: Discount code (will be normalized to uppercase)
        starts_at:
          type: string
          format: date-time
          description: Discount validity start date
        ends_at:
          type: string
          format: date-time
          description: Discount validity end date
        max_redemptions:
          type: integer
          minimum: 1
          description: Maximum number of redemptions allowed
        active:
          type: boolean
          description: Whether the discount is active
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata

    ValidateDiscountRequest:
      type: object
      required: [code]
      properties:
        code:
          type: string
          description: Discount code to validate
        customer_id:
          type: string
          description: Customer ID for validation context
        amount:
          type: integer
          minimum: 1
          description: Amount to apply discount to (in smallest currency unit)
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: ISO 4217 currency code

    DiscountValidationResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the discount code is valid
        discount:
          $ref: '#/components/schemas/Discount'
        discount_amount:
          type: integer
          description: Amount that would be saved (in smallest currency unit)
        final_amount:
          type: integer
          description: Final amount after discount (in smallest currency unit)
        error:
          type: string
          description: Error message if validation failed

    ApplyDiscountRequest:
      type: object
      required: [customer_id, resource_type, resource_id, amount, currency]
      properties:
        discount_id:
          type: string
          description: Discount ID to apply (use this OR code)
        code:
          type: string
          description: Discount code to apply (use this OR discount_id)
        customer_id:
          type: string
          description: Customer ID
        resource_type:
          type: string
          enum: [subscription, invoice, payment, checkout_session]
          description: Type of resource to apply discount to
        resource_id:
          type: string
          description: ID of resource to apply discount to
        amount:
          type: integer
          minimum: 1
          description: Amount to apply discount to (in smallest currency unit)
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: ISO 4217 currency code

    DiscountApplicationResponse:
      type: object
      properties:
        discount:
          $ref: '#/components/schemas/Discount'
        redemption:
          $ref: '#/components/schemas/DiscountRedemption'
        discount_amount:
          type: integer
          description: Amount saved (in smallest currency unit)
        final_amount:
          type: integer
          description: Final amount after discount (in smallest currency unit)

    # Payment Link schemas
    PaymentLink:
      type: object
      properties:
        id:
          type: string
          description: Unique payment link identifier
        slug:
          type: string
          description: URL-friendly identifier
        data:
          type: object
          additionalProperties: true
          description: Payment link data configuration
        config:
          type: object
          additionalProperties: true
          description: Payment link configuration
        single_use:
          type: boolean
          description: Whether this link can only be used once
        status:
          type: string
          enum: [active, inactive, expired, used]
          description: Current status of the payment link
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        used_at:
          type: string
          format: date-time
          description: Timestamp when the link was used (if applicable)
        expires_at:
          type: string
          format: date-time
          description: Expiration timestamp (if applicable)

    PaymentLinkUsage:
      type: object
      properties:
        id:
          type: string
          description: Unique usage record identifier
        payment_link_id:
          type: string
          description: Associated payment link ID
        session_id:
          type: string
          description: Session identifier (if applicable)
        customer_id:
          type: string
          description: Customer identifier (if applicable)
        event_type:
          type: string
          description: Type of usage event
        ip_address:
          type: string
          description: IP address of the user
        user_agent:
          type: string
          description: User agent string
        referer:
          type: string
          description: HTTP referer
        country:
          type: string
          description: Country code derived from IP
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata
        timestamp:
          type: string
          format: date-time
          description: Event timestamp

    CreatePaymentLinkRequest:
      type: object
      required: [slug, config]
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z0-9_-]+$'
          description: URL-friendly identifier (must be unique within organization)
        data:
          type: object
          additionalProperties: true
          description: Payment link data configuration
        config:
          type: object
          additionalProperties: true
          description: Payment link configuration
        single_use:
          type: boolean
          default: false
          description: Whether this link can only be used once
        expires_at:
          type: string
          format: date-time
          description: Optional expiration timestamp

    UpdatePaymentLinkRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z0-9_-]+$'
          description: URL-friendly identifier
        data:
          type: object
          additionalProperties: true
          description: Payment link data configuration
        config:
          type: object
          additionalProperties: true
          description: Payment link configuration
        single_use:
          type: boolean
          description: Whether this link can only be used once
        status:
          type: string
          enum: [active, inactive, expired, used]
          description: Payment link status
        expires_at:
          type: string
          format: date-time
          description: Expiration timestamp

    CreateInvoicePaymentLinkRequest:
      type: object
      properties:
        expires_at:
          type: string
          format: date-time
          description: Optional expiration timestamp (defaults to invoice due date)
        success_url:
          type: string
          format: uri
          description: URL to redirect to after successful payment
        cancel_url:
          type: string
          format: uri
          description: URL to redirect to after cancelled payment
        config:
          type: object
          additionalProperties: true
          description: Additional payment link configuration overrides

    InitiateInvoicePaymentRequest:
      type: object
      required: [payment_processor]
      properties:
        payment_processor:
          type: string
          enum: [paystack, checkout_com]
          description: Payment processor to use for payment initiation
        billing_address:
          $ref: '#/components/schemas/Address'
        success_url:
          type: string
          format: uri
          description: URL to redirect to after successful payment
        cancel_url:
          type: string
          format: uri
          description: URL to redirect to after cancelled payment
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional metadata for the payment

    RecordPaymentLinkUsageRequest:
      type: object
      required: [payment_link_id, event_type]
      properties:
        payment_link_id:
          type: string
          description: Payment link ID
        session_id:
          type: string
          description: Session identifier
        customer_id:
          type: string
          description: Customer identifier
        event_type:
          type: string
          description: Type of usage event (e.g., 'view', 'click', 'conversion')
        ip_address:
          type: string
          description: IP address of the user
        user_agent:
          type: string
          description: User agent string
        referer:
          type: string
          description: HTTP referer
        country:
          type: string
          description: Country code
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata

    PaymentLinkResponse:
      allOf:
        - $ref: '#/components/schemas/PaymentLink'
        - type: object
          properties:
            token:
              type: string
              description: Access token for the payment link (returned when creating invoice payment links)

    InitiatePaymentResponse:
      type: object
      required: [order_id, payment_processor, amount, currency, status, reference]
      properties:
        order_id:
          type: string
          description: Unique order identifier
        payment_processor:
          type: string
          enum: [paystack, checkout_com]
          description: Payment processor used
        redirect_url:
          type: string
          format: uri
          description: Redirect URL for Paystack payments
        client_secret:
          type: string
          description: Client secret for Stripe-like processors
        session_id:
          type: string
          description: Session ID for other processors
        amount:
          type: integer
          format: int64
          description: Payment amount in cents
        currency:
          type: string
          description: Payment currency code (e.g., USD, NGN)
        status:
          type: string
          enum: [pending]
          description: Payment status (always pending for initiation)
        reference:
          type: string
          description: Payment reference identifier

    PaymentLinkUsageResponse:
      allOf:
        - $ref: '#/components/schemas/PaymentLinkUsage'

    PaymentLinkListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/PaymentLinkResponse'

    PaymentLinkUsageListResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/PaymentLinkUsageResponse'

    # Request schemas
    CreateOrganizationRequest:
      type: object
      required: [name, country, timezone]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        country:
          type: string
          pattern: '^[A-Z]{2}$'
          description: ISO 3166-1 alpha-2 country code
        timezone:
          type: string
          description: IANA timezone identifier
        metadata:
          type: object
          additionalProperties:
            type: string

    CreateCustomerRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
          maxLength: 255
        last_name:
          type: string
          maxLength: 255
        phone:
          type: string
          maxLength: 50
        billing_address:
          $ref: '#/components/schemas/Address'
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Key-value pairs for storing additional data

    CreatePaymentMethodRequest:
      type: object
      required: [psp, name, type, token]
      properties:
        psp:
          type: string
          description: Payment service provider identifier
        name:
          type: string
          description: Display name for the payment method
        type:
          type: string
          enum: [card, bank_account]
        details:
          type: object
          description: PSP-specific payment method details
        token:
          type: string
          description: Payment method token from PSP
        is_default:
          type: boolean
          default: false
        billing_address:
          $ref: '#/components/schemas/Address'
        metadata:
          type: object
          additionalProperties:
            type: string

    UpdatePaymentMethodRequest:
      type: object
      properties:
        name:
          type: string
        is_default:
          type: boolean
        billing_address:
          $ref: '#/components/schemas/Address'
        metadata:
          type: object
          additionalProperties:
            type: string

    CreateProductRequest:
      type: object
      required: [name, variants]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        metadata:
          type: object
          additionalProperties:
            type: string
        variants:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CreateVariantRequest'

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        metadata:
          type: object
          additionalProperties:
            type: string

    CreateVariantRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        metadata:
          type: object
          additionalProperties:
            type: string
        prices:
          type: array
          items:
            $ref: '#/components/schemas/CreatePriceRequest'

    UpdateVariantRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        metadata:
          type: object
          additionalProperties:
            type: string

    CreatePriceRequest:
      type: object
      required: [variant_id, category, scheme, currency]
      properties:
        variant_id:
          type: string
        label:
          type: string
          description: Display label for the price
        category:
          type: string
          enum: [one_time, subscription, usage, hybrid, free, variable]
          description: Price category
        scheme:
          type: string
          enum: [fixed, tiered, volume, graduated]
          description: Pricing scheme
        cycles:
          type: integer
          minimum: 1
          description: Number of billing cycles (null for unlimited)
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: ISO 4217 currency code
        unit_price:
          type: integer
          minimum: 0
          description: Price in smallest currency unit (e.g., cents)
        min_price:
          type: integer
          minimum: 0
          description: Minimum price for variable pricing
        suggested_price:
          type: integer
          minimum: 0
          description: Suggested price for variable pricing
        billing_interval:
          type: string
          enum: [none, minute, hour, day, week, month, year]
          description: Billing interval
        billing_interval_qty:
          type: integer
          minimum: 1
          maximum: 999
          description: Billing interval quantity
        trial_interval:
          type: string
          enum: [none, minute, hour, day, week, month, year]
          description: Trial period interval
        trial_interval_qty:
          type: integer
          minimum: 1
          description: Trial period quantity
        # Usage-based billing fields
        has_usage:
          type: boolean
          default: false
          description: Whether this price supports usage billing
        usage_type:
          type: string
          enum: [metered, licensed]
          description: Type of usage billing
        unit_type:
          type: string
          description: Unit type for usage (e.g., api_calls, gb, seats)
        aggregation_type:
          type: string
          enum: [sum, max, average, last_during_period]
          description: How usage is aggregated for billing
        percentage_rate:
          type: number
          minimum: 0
          maximum: 100
          description: Percentage rate for transaction-based billing
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/PricingTier'
          description: Pricing tiers for tiered/graduated schemes
        tax_code:
          type: string
          description: Tax code for tax calculations
        metadata:
          type: object
          additionalProperties:
            type: string

    UpdatePriceRequest:
      type: object
      properties:
        label:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string

    PricingTier:
      type: object
      required: [up_to, unit_price]
      properties:
        up_to:
          type: integer
          minimum: 1
          description: Upper limit for this tier (null for unlimited)
        unit_price:
          type: integer
          minimum: 0
          description: Price per unit in this tier
        flat_fee:
          type: integer
          minimum: 0
          description: Flat fee for this tier

    PauseSubscriptionRequest:
      type: object
      required: [pause_mode]
      properties:
        pause_mode:
          type: string
          description: Type of pause
        resume_at:
          type: string
          description: When to automatically resume (for temporary pauses)
        reason:
          type: string
          description: Reason for pausing

    ResumeSubscriptionRequest:
      type: object
      properties:
        proration_mode:
          type: string
          description: Proration handling
        resume_behavior:
          type: string
          description: How to handle the billing period

    CancelSubscriptionRequest:
      type: object
      required: [cancel_mode]
      properties:
        cancel_mode:
          type: string
          description: When to cancel the subscription
        proration_mode:
          type: string
          description: Proration handling
        cancellation_date:
          type: string
          description: Specific cancellation date
        reason:
          type: string
          description: Reason for cancellation

    ChangePlanRequest:
      type: object
      required: [new_variant_id, new_price_id]
      properties:
        new_variant_id:
          type: string
          description: ID of the new variant
        new_price_id:
          type: string
          description: ID of the new price
        proration_mode:
          type: string
          enum: [none, immediate, credit_unused]
          default: none
          description: How to handle prorations
        effective_date:
          type: string
          enum: [immediate, next_billing_cycle]
          default: immediate
          description: When the change takes effect
        reason:
          type: string
          description: Reason for the plan change

    UpdateBillingAnchorRequest:
      type: object
      required: [billing_anchor, proration_mode]
      properties:
        billing_anchor:
          type: integer
          minimum: 1
          maximum: 31
          description: Day of month for billing
        proration_mode:
          type: string
          enum: [none, credit_unused]
          description: How to handle prorations

    CreateSubscriptionRequest:
      type: object
      required: [customer_id, currency, items]
      properties:
        customer_id:
          type: string
          description: Customer ID for the subscription
        payment_method_id:
          type: string
          description: Payment method ID to use for billing (optional)
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: ISO 4217 currency code
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CreateSubscriptionItemRequest'
          description: Subscription items
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Custom metadata

    CreateSubscriptionItemRequest:
      type: object
      required: [price_id, name]
      properties:
        price_id:
          type: string
          description: Price ID for this subscription item
        name:
          type: string
          description: Name for this subscription item
        description:
          type: string
          description: Optional description
        quantity:
          type: integer
          minimum: 1
          description: Quantity for this item
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Custom metadata

    RecordUsageRequest:
      type: object
      required: [specversion, type, id, time, subject, data]
      properties:
        specversion:
          type: string
          example: "1.0"
          description: CloudEvents specification version
        type:
          type: string
          description: Event type (should match meter event_name)
        id:
          type: string
          description: Unique identifier for this event
        time:
          type: string
          format: date-time
          description: When the event occurred
        source:
          type: string
          description: Source of the event (service, app, etc.)
        subject:
          type: string
          description: Subject of the event (subscription_item_id)
        data:
          type: object
          additionalProperties: true
          description: Event-specific data containing the usage information

    BatchRecordUsageRequest:
      type: object
      required: [records]
      properties:
        records:
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: '#/components/schemas/RecordUsageRequest'
          description: Array of usage records to create

    CreateOrderRequest:
      type: object
      required: [customer, psp_id]
      properties:
        customer:
          oneOf:
            - type: object
              required: [id]
              properties:
                id:
                  type: string
                  description: Existing customer ID
            - $ref: '#/components/schemas/CreateCustomerRequest'
          description: Customer information (existing ID or new customer data)
        payment_method_id:
          type: string
          description: Payment method ID to use
        session_id:
          type: string
          description: Session ID for tracking
        psp_id:
          type: string
          description: Payment service provider ID
        cart:
          type: object
          properties:
            currency:
              type: string
              pattern: '^[A-Z]{3}$'
              description: Order currency
            items:
              type: array
              minItems: 1
              items:
                type: object
                required: [product_id, price_id, quantity]
                properties:
                  product_id:
                    type: string
                  price_id:
                    type: string
                  quantity:
                    type: integer
                    minimum: 1
        metadata:
          type: object
          additionalProperties:
            type: string

    CompleteOrderRequest:
      type: object
      properties:
        payment_method_id:
          type: string
          description: Payment method to use for completion
        payment_method:
          type: object
          properties:
            token:
              type: string
              description: Payment method token
            type:
              type: string
              enum: [card, bank_account]
          description: New payment method details
        payment:
          type: object
          properties:
            amount:
              type: integer
              minimum: 0
              description: Payment amount in cents
            currency:
              type: string
              pattern: '^[A-Z]{3}$'
          description: Payment details
        metadata:
          type: object
          additionalProperties:
            type: string

    AddCartItemRequest:
      type: object
      required: [product_id, price_id]
      properties:
        product_id:
          type: string
        price_id:
          type: string
        quantity:
          type: integer
          minimum: 1
          default: 1

    RemoveCartItemRequest:
      type: object
      required: [id]
      properties:
        org_id:
          type: string
        id:
          type: string

    ValidateCouponRequest:
      type: object
      required: [code]
      properties:
        code:
          type: string
          description: Coupon code to validate

    CartResponse:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: string
              price_id:
                type: string
              quantity:
                type: integer
              unit_price:
                type: integer
              total_price:
                type: integer
        subtotal:
          type: integer
        discounts:
          type: array
          items:
            type: object
            properties:
              discount_id:
                type: string
              discount_amount:
                type: integer
        total:
          type: integer
        currency:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateInvoiceRequest:
      type: object
      required: [customer_id, type, invoice_type, currency]
      properties:
        customer_id:
          type: string
        order_id:
          type: string
          description: Associated order ID
        subscription_id:
          type: string
          description: Associated subscription ID
        type:
          type: string
          enum: [invoice, proforma, quote, receipt, statement]
          description: Document type
        invoice_type:
          type: string
          enum: [initial, recurring, usage, adjustment, setup, cancellation, refund]
          description: Invoice category
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
        due_at:
          type: string
          format: date-time
          description: Payment due date
        notes:
          type: string
          description: Internal notes
        customer_notes:
          type: string
          description: Notes visible to customer
        metadata:
          type: object
          additionalProperties:
            type: string
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/CreateInvoiceLineItemRequest'

    UpdateInvoiceRequest:
      type: object
      properties:
        customer_notes:
          type: string
        notes:
          type: string
        due_at:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties:
            type: string

    CreateInvoiceLineItemRequest:
      type: object
      required: [description, quantity, unit_price]
      properties:
        product_id:
          type: string
        variant_id:
          type: string
        price_id:
          type: string
        description:
          type: string
          description: Line item description
        category:
          type: string
          description: Line item category
        quantity:
          type: number
          minimum: 0
        unit_price:
          type: integer
          minimum: 0
          description: Price per unit in cents
        discount_type:
          type: string
          enum: [percentage, fixed]
        discount_value:
          type: integer
          minimum: 0
        tax_code:
          type: string
        tax_rate:
          type: integer
          minimum: 0
          description: Tax rate in basis points (e.g., 875 = 8.75%)
        tax_exempt:
          type: boolean
          default: false
        metadata:
          type: object
          additionalProperties:
            type: string

    UpdateInvoiceLineItemRequest:
      type: object
      properties:
        description:
          type: string
        category:
          type: string
        quantity:
          type: number
          minimum: 0
        unit_price:
          type: integer
          minimum: 0
        discount_type:
          type: string
          enum: [percentage, fixed]
        discount_value:
          type: integer
          minimum: 0
        tax_code:
          type: string
        tax_rate:
          type: integer
          minimum: 0
        tax_exempt:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string

    RefundPaymentRequest:
      type: object
      properties:
        reason:
          type: string
          description: Reason for refund
        amount:
          type: integer
          minimum: 1
          description: Amount to refund in cents (if not provided, full amount)

    UpdateDunningCampaignRequest:
      type: object
      properties:
        status:
          type: string
          enum: [active, paused, completed]
        metadata:
          type: object
          additionalProperties:
            type: string

    CreateDunningConfigurationRequest:
      type: object
      required: [name, max_attempts, retry_schedule]
      properties:
        name:
          type: string
          description: Configuration name
        max_attempts:
          type: integer
          minimum: 1
          maximum: 10
          description: Maximum number of retry attempts
        retry_schedule:
          type: array
          items:
            type: object
            required: [delay_days, communication_template]
            properties:
              delay_days:
                type: integer
                minimum: 0
                description: Days to wait before this attempt
              communication_template:
                type: string
                description: Email template to use
        grace_period_days:
          type: integer
          minimum: 0
          description: Grace period before starting dunning
        metadata:
          type: object
          additionalProperties:
            type: string

    UpdateDunningConfigurationRequest:
      type: object
      properties:
        name:
          type: string
        max_attempts:
          type: integer
          minimum: 1
          maximum: 10
        retry_schedule:
          type: array
          items:
            type: object
            properties:
              delay_days:
                type: integer
                minimum: 0
              communication_template:
                type: string
        grace_period_days:
          type: integer
          minimum: 0
        metadata:
          type: object
          additionalProperties:
            type: string

    VerifyPaymentTokenRequest:
      type: object
      required: [token]
      properties:
        token:
          type: string
          description: Payment token to verify

    ActivatePaymentTokenRequest:
      type: object
      required: [token, payment_method_token]
      properties:
        token:
          type: string
          description: Payment token
        payment_method_token:
          type: string
          description: New payment method token from PSP

    CreateWebhookRequest:
      type: object
      required: [url, events]
      properties:
        url:
          type: string
          format: uri
          description: Webhook endpoint URL
        events:
          type: array
          minItems: 1
          items:
            type: string
            enum: [
              'subscription.created', 'subscription.updated', 'subscription.cancelled',
              'invoice.created', 'invoice.finalized', 'invoice.payment_succeeded', 'invoice.payment_failed',
              'payment.succeeded', 'payment.failed',
              'customer.created', 'customer.updated',
              'usage.recorded'
            ]
          description: List of events to subscribe to
        secret:
          type: string
          description: Secret for webhook signature verification

    CreatePspConfigurationRequest:
      type: object
      required: [name, provider, configuration]
      properties:
        name:
          type: string
          description: Configuration name
        provider:
          type: string
          enum: [paystack, checkout_com, stripe]
          description: Payment service provider
        configuration:
          type: object
          description: PSP-specific configuration
        is_active:
          type: boolean
          default: true

    CreateSessionRequest:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [checkout, customer_portal]
          description: Session type
        customer_id:
          type: string
          description: Customer ID (required for customer portal)
        return_url:
          type: string
          format: uri
          description: URL to return to after session
        metadata:
          type: object
          additionalProperties:
            type: string

    CreateSettingRequest:
      type: object
      required: [key, value]
      properties:
        key:
          type: string
          description: Setting key
        value:
          type: string
          description: Setting value
        description:
          type: string
          description: Setting description

    UpdateSettingRequest:
      type: object
      properties:
        value:
          type: string
        description:
          type: string

    # Response schemas
    Organization:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        country:
          type: string
        timezone:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Customer:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        billing_address:
          $ref: '#/components/schemas/Address'
        default_payment_method_id:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        variants:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Variant:
      type: object
      properties:
        id:
          type: string
        product_id:
          type: string
        name:
          type: string
        description:
          type: string
        prices:
          type: array
          items:
            $ref: '#/components/schemas/Price'
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Price:
      type: object
      properties:
        id:
          type: string
        variant_id:
          type: string
        label:
          type: string
        category:
          type: string
          enum: [one_time, subscription, usage, hybrid, free, variable]
        scheme:
          type: string
          enum: [fixed, tiered, volume, graduated]
        cycles:
          type: integer
        currency:
          type: string
        unit_price:
          type: integer
        min_price:
          type: integer
        suggested_price:
          type: integer
        billing_interval:
          type: string
          enum: [none, minute, hour, day, week, month, year]
        billing_interval_qty:
          type: integer
        trial_interval:
          type: string
          enum: [none, minute, hour, day, week, month, year]
        trial_interval_qty:
          type: integer
        has_usage:
          type: boolean
        usage_type:
          type: string
          enum: [metered, licensed]
        unit_type:
          type: string
        aggregation_type:
          type: string
          enum: [sum, max, average, last_during_period]
        percentage_rate:
          type: number
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/PricingTier'
        tax_code:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Subscription:
      type: object
      properties:
        id:
          type: string
        psp_id:
          type: string
        order_id:
          type: string
        order_item_id:
          type: string
        customer_id:
          type: string
        payment_method_id:
          type: string
        product_id:
          type: string
        variant_id:
          type: string
        price_id:
          type: string
        status:
          type: string
          enum: [trial, active, past_due, non_renewing, paused, unpaid, cancelled, pending, expired, completed, error]
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        billing_interval:
          type: string
          enum: [none, minute, hour, day, week, month, year]
        billing_interval_qty:
          type: integer
        cycles:
          type: integer
        billing_anchor:
          type: integer
        trial_ends_at:
          type: string
          format: date-time
        cancel_at:
          type: string
          format: date-time
        ends_at:
          type: string
          format: date-time
        last_charge:
          type: string
          format: date-time
        renews_at:
          type: string
          format: date-time
        current_period_start:
          type: string
          format: date-time
        current_period_end:
          type: string
          format: date-time
        retries:
          type: integer
        next_retry:
          type: string
          format: date-time
        currency:
          type: string
        amount:
          type: integer
        metadata:
          type: object
          additionalProperties:
            type: string
        cycles_processed:
          type: integer
        total_revenue:
          type: integer
        cancelled_at:
          type: string
          format: date-time
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionItem'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UpdateSubscriptionRequest:
      type: object
      properties:
        payment_method_id:
          type: string
          description: Payment method ID to use for billing
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Custom metadata for the subscription

    SubscriptionItem:
      type: object
      properties:
        id:
          type: string
        subscription_id:
          type: string
        price_id:
          type: string
        quantity:
          type: integer
        description:
          type: string
        currency:
          type: string
        unit_price:
          type: integer
        has_usage:
          type: boolean
        usage_type:
          type: string
          enum: [metered, licensed]
        unit_type:
          type: string
        aggregation_type:
          type: string
          enum: [sum, max, average, last_during_period]
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Meter schemas
    Meter:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        event_name:
          type: string
          description: The name of the event to track
        event_filter:
          type: object
          additionalProperties: true
          description: Optional filter to apply to events
        aggregation_type:
          type: string
          enum: [sum, max, average, last_during_period]
          description: How usage values are aggregated
        value_property:
          type: string
          description: JSON path to extract the value from event data
        unit_type:
          type: string
          description: Unit of measurement (e.g., "API calls", "GB", "users")
        display_name:
          type: string
          description: Display name for the unit type
        window_size:
          type: string
          enum: [minute, hour, day, month]
          description: Window size for aggregation
        reset_interval:
          type: string
          enum: [hourly, daily, monthly, never]
          description: When to reset aggregation
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateMeterRequest:
      type: object
      required: [name, event_name, aggregation_type, unit_type]
      properties:
        name:
          type: string
          description: Display name for the meter
        description:
          type: string
          description: Optional description
        event_name:
          type: string
          description: The name of the event to track
        event_filter:
          type: object
          additionalProperties: true
          description: Optional filter to apply to events
        aggregation_type:
          type: string
          enum: [sum, max, average, last_during_period]
          description: How usage values are aggregated
        value_property:
          type: string
          description: JSON path to extract the value from event data
        unit_type:
          type: string
          description: Unit of measurement (e.g., "API calls", "GB", "users")
        display_name:
          type: string
          description: Display name for the unit type
        window_size:
          type: string
          enum: [minute, hour, day, month]
          description: Window size for aggregation
        reset_interval:
          type: string
          enum: [hourly, daily, monthly, never]
          description: When to reset aggregation
        metadata:
          type: object
          additionalProperties:
            type: string

    UpdateMeterRequest:
      type: object
      required: [name, event_name, aggregation_type, unit_type, display_name]
      properties:
        name:
          type: string
          description: Display name for the meter
        description:
          type: string
          description: Optional description
        event_name:
          type: string
          description: The name of the event to track
        event_filter:
          type: object
          additionalProperties: true
          description: Optional filter to apply to events
        aggregation_type:
          type: string
          enum: [sum, max, average, last_during_period]
          description: How usage values are aggregated
        value_property:
          type: string
          description: JSON path to extract the value from event data
        unit_type:
          type: string
          description: Unit of measurement (e.g., "API calls", "GB", "users")
        display_name:
          type: string
          description: Display name for the unit type
        window_size:
          type: string
          enum: [minute, hour, day, month]
          description: Window size for aggregation
        reset_interval:
          type: string
          enum: [hourly, daily, monthly, never]
          description: When to reset aggregation
        metadata:
          type: object
          additionalProperties:
            type: string

    # CloudEvents schemas
    CloudEventUsageRequest:
      type: object
      required: [specversion, type, id, time, source, subject, data]
      properties:
        specversion:
          type: string
          example: "1.0"
          description: CloudEvents specification version
        type:
          type: string
          description: Event type (should match meter event_name)
        id:
          type: string
          description: Unique identifier for this event
        time:
          type: string
          format: date-time
          description: When the event occurred
        source:
          type: string
          description: Source of the event (service, app, etc.)
        subject:
          type: string
          description: Subject of the event (subscription_item_id)
        data:
          type: object
          additionalProperties: true
          description: Event-specific data containing the usage information

    # Usage response schemas
    UsageResponse:
      type: object
      properties:
        event_id:
          type: string
          description: Internal event ID
        original_event_id:
          type: string
          description: Original CloudEvent ID
        subscription_item_id:
          type: string
        type:
          type: string
          description: CloudEvent type
        status:
          type: string
          enum: ["recorded", "processing", "calculated"]
          description: Processing status
        recorded_at:
          type: string
          format: date-time
        message:
          type: string
          description: Optional status message

    UsageEventResponse:
      type: object
      properties:
        id:
          type: string
        org_id:
          type: string
        subscription_id:
          type: string
        subscription_item_id:
          type: string
        meter_id:
          type: string
        spec_version:
          type: string
        type:
          type: string
        event_id:
          type: string
        time:
          type: string
          format: date-time
        source:
          type: string
        subject:
          type: string
        data:
          type: object
          additionalProperties: true
        received_at:
          type: string
          format: date-time

    UsageEstimateResponse:
      type: object
      properties:
        subscription_id:
          type: string
        billing_period:
          type: string
          description: Current billing period in YYYY-MM format
        estimate:
          type: object
          properties:
            total_usage:
              type: number
              description: Total usage quantity for the period
            estimated_amount:
              type: integer
              description: Estimated billing amount in cents
            currency:
              type: string
            period_start:
              type: string
              format: date-time
            period_end:
              type: string
              format: date-time
        items:
          type: array
          items:
            type: object
            properties:
              subscription_item_id:
                type: string
              unit_type:
                type: string
              quantity:
                type: number
              unit_price:
                type: integer
              estimated_amount:
                type: integer

    CloudEventUsageResponse:
      type: object
      properties:
        id:
          type: string
        org_id:
          type: string
        subscription_id:
          type: string
        subscription_item_id:
          type: string
        meter_id:
          type: string
        spec_version:
          type: string
        type:
          type: string
        event_id:
          type: string
        time:
          type: string
          format: date-time
        source:
          type: string
        subject:
          type: string
        data:
          type: object
          additionalProperties: true
        received_at:
          type: string
          format: date-time

    UsageRecord:
      type: object
      properties:
        id:
          type: string
        org_id:
          type: string
        subscription_id:
          type: string
        subscription_item_id:
          type: string
        customer_id:
          type: string
        price_id:
          type: string
        usage_type:
          type: string
          enum: [metered, licensed]
        unit_type:
          type: string
        aggregation_type:
          type: string
          enum: [sum, max, average, last_during_period]
        quantity:
          type: number
        unit_price:
          type: integer
        transaction_value:
          type: integer
        percentage_rate:
          type: number
        calculated_fee:
          type: integer
        total_amount:
          type: integer
        usage_date:
          type: string
          format: date-time
        billing_period:
          type: string
          description: Billing period in YYYY-MM format
        processed:
          type: boolean
        reference_id:
          type: string
        reference_type:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UsageSummary:
      type: object
      properties:
        subscription_id:
          type: string
        subscription_item_id:
          type: string
        billing_period:
          type: string
        usage_type:
          type: string
          enum: [metered, licensed]
        unit_type:
          type: string
        aggregation_type:
          type: string
          enum: [sum, max, average, last_during_period]
        total_quantity:
          type: number
        total_amount:
          type: integer
        details:
          type: object
          description: Additional summary details

    Order:
      type: object
      properties:
        id:
          type: string
        customer_id:
          type: string
        status:
          type: string
          enum: [pending, failed, refunded, partial_refund, completed, expired, cancelled, fraudulent]
        reference:
          type: string
        session_id:
          type: string
        currency:
          type: string
        sub_total:
          type: integer
        tax_total:
          type: integer
        discount_total:
          type: integer
        total:
          type: integer
        metadata:
          type: object
          additionalProperties:
            type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        customer:
          $ref: '#/components/schemas/Customer'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: string
        order_id:
          type: string
        product_id:
          type: string
        variant_id:
          type: string
        price_id:
          type: string
        description:
          type: string
        quantity:
          type: number
        unit_price:
          type: integer
        sub_total:
          type: integer
        total:
          type: integer
        tax_total:
          type: integer
        discount_total:
          type: integer
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
        psp:
          type: string
        psp_id:
          type: string
        reference:
          type: string
        recurring:
          type: boolean
        order_id:
          type: string
        invoice_id:
          type: string
        subscription_id:
          type: string
        customer_id:
          type: string
        amount:
          type: integer
        currency:
          type: string
        status:
          type: string
          enum: [pending, failed, succeeded, refunded, partial_refund, cancelled, expired, fraudulent]
        psp_fee:
          type: integer
        platform_fee:
          type: integer
        net_amount:
          type: integer
        refunded_amount:
          type: integer
        metadata:
          type: object
          additionalProperties:
            type: string
        completed_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PaymentMethod:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [active, expired]
        psp:
          type: string
        name:
          type: string
        customer_id:
          type: string
        billing_address:
          $ref: '#/components/schemas/Address'
        details:
          type: object
          description: Masked payment method details
        type:
          type: string
          enum: [card, bank_account]
        token:
          type: string
        is_default:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        expire_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Invoice:
      type: object
      properties:
        id:
          type: string
        customer_id:
          type: string
        order_id:
          type: string
        subscription_id:
          type: string
        sequence_id:
          type: string
        doc_number:
          type: string
        type:
          type: string
          enum: [invoice, proforma, quote, receipt, statement]
        invoice_type:
          type: string
          enum: [initial, recurring, usage, adjustment, setup, cancellation, refund]
        status:
          type: string
          enum: [draft, sent, paid, overdue, cancelled, refunded]
        is_immutable:
          type: boolean
        currency:
          type: string
        sub_total:
          type: integer
        tax_total:
          type: integer
        discount_total:
          type: integer
        total:
          type: integer
        amount_paid:
          type: integer
        amount_due:
          type: integer
        tax_provider:
          type: string
        tax_transaction_id:
          type: string
        tax_breakdown:
          type: object
        issued_at:
          type: string
          format: date-time
        due_at:
          type: string
          format: date-time
        schedule_at:
          type: string
          format: date-time
        finalize_at:
          type: string
          format: date-time
        paid_at:
          type: string
          format: date-time
        notes:
          type: string
        customer_notes:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        exchange_rate:
          type: integer
        base_currency:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    InvoiceLineItem:
      type: object
      properties:
        id:
          type: string
        invoice_id:
          type: string
        product_id:
          type: string
        variant_id:
          type: string
        price_id:
          type: string
        description:
          type: string
        category:
          type: string
        quantity:
          type: number
        unit_price:
          type: integer
        line_total:
          type: integer
        discount_type:
          type: string
          enum: [percentage, fixed]
        discount_value:
          type: integer
        discount_total:
          type: integer
        tax_code:
          type: string
        tax_rate:
          type: integer
        tax_amount:
          type: integer
        tax_exempt:
          type: boolean
        seq:
          type: integer
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    InvoiceHistory:
      type: object
      properties:
        id:
          type: string
        invoice_id:
          type: string
        action:
          type: string
          enum: [created, updated, finalized, sent, paid, voided]
        field:
          type: string
        old_value:
          type: object
        new_value:
          type: object
        user_email:
          type: string
        reason:
          type: string
        timestamp:
          type: string
          format: date-time

    Refund:
      type: object
      properties:
        id:
          type: string
        psp_refund_id:
          type: string
        payment_id:
          type: string
        amount:
          type: integer
        currency:
          type: string
        reason:
          type: string
        status:
          type: string
          enum: [pending, completed, error]
        refunded_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PlanChange:
      type: object
      properties:
        id:
          type: string
        subscription_id:
          type: string
        old_variant_id:
          type: string
        new_variant_id:
          type: string
        old_price_id:
          type: string
        new_price_id:
          type: string
        proration_mode:
          type: string
          enum: [none, immediate, credit_unused]
        effective_date:
          type: string
          enum: [immediate, next_billing_cycle]
        reason:
          type: string
        proration_amount:
          type: integer
        created_at:
          type: string
          format: date-time

    ProrationDetails:
      type: object
      properties:
        credit_amount:
          type: integer
          description: Amount credited in smallest currency unit
        days_credited:
          type: integer
          description: Number of days credited
        current_period_start:
          type: string
          format: date-time
        current_period_end:
          type: string
          format: date-time
        old_billing_anchor:
          type: integer
        new_billing_anchor:
          type: integer
        new_period_start:
          type: string
          format: date-time
        new_period_end:
          type: string
          format: date-time

    # Dunning schemas
    DunningCampaign:
      type: object
      properties:
        id:
          type: string
        subscription_id:
          type: string
        customer_id:
          type: string
        status:
          type: string
          enum: [active, paused, completed, failed]
        current_attempt:
          type: integer
        max_attempts:
          type: integer
        next_attempt_at:
          type: string
          format: date-time
        configuration_id:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    DunningAttempt:
      type: object
      properties:
        id:
          type: string
        campaign_id:
          type: string
        attempt_number:
          type: integer
        status:
          type: string
          enum: [scheduled, processing, succeeded, failed, skipped]
        payment_result:
          type: string
          enum: [succeeded, failed, no_payment_method]
        scheduled_at:
          type: string
          format: date-time
        attempted_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        error_message:
          type: string
        created_at:
          type: string
          format: date-time

    DunningCommunication:
      type: object
      properties:
        id:
          type: string
        campaign_id:
          type: string
        attempt_id:
          type: string
        type:
          type: string
          enum: [email, sms, webhook]
        template_id:
          type: string
        recipient:
          type: string
        subject:
          type: string
        content:
          type: string
        status:
          type: string
          enum: [sent, delivered, failed, bounced]
        sent_at:
          type: string
          format: date-time
        delivered_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    DunningConfiguration:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        max_attempts:
          type: integer
        grace_period_days:
          type: integer
        retry_schedule:
          type: array
          items:
            type: object
            properties:
              delay_days:
                type: integer
              communication_template:
                type: string
        is_active:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PaymentToken:
      type: object
      properties:
        token:
          type: string
        subscription_id:
          type: string
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    PaymentTokenVerification:
      type: object
      properties:
        valid:
          type: boolean
        subscription_id:
          type: string
        customer_id:
          type: string
        expires_at:
          type: string
          format: date-time

    # Webhook schemas
    WebhookSubscription:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
        secret:
          type: string
          description: Webhook secret for signature verification
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Report schemas
    RevenueReport:
      type: object
      properties:
        period:
          type: string
        currency:
          type: string
        total_revenue:
          type: integer
        recurring_revenue:
          type: integer
        one_time_revenue:
          type: integer
        usage_revenue:
          type: integer
        data_points:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              amount:
                type: integer

    SubscriberReport:
      type: object
      properties:
        date:
          type: string
          format: date
        active_subscribers:
          type: integer
        new_subscribers:
          type: integer
        churned_subscribers:
          type: integer
        trial_subscribers:
          type: integer

    RefundReport:
      type: object
      properties:
        period_start:
          type: string
          format: date
        period_end:
          type: string
          format: date
        total_refunds:
          type: integer
        refund_count:
          type: integer
        refund_rate:
          type: number
          description: Refund rate as percentage

    ChurnReport:
      type: object
      properties:
        period:
          type: string
        churned_customers:
          type: integer
        total_customers:
          type: integer
        churn_rate:
          type: number
          description: Churn rate as percentage
        data_points:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              churn_rate:
                type: number

    # Configuration schemas
    PspConfiguration:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        provider:
          type: string
          enum: [paystack, checkout_com, stripe]
        configuration:
          type: object
          description: Provider-specific configuration (sensitive data masked)
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [checkout, customer_portal]
        url:
          type: string
          format: uri
          description: Session URL for redirect
        customer_id:
          type: string
        return_url:
          type: string
          format: uri
        expires_at:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time

    Setting:
      type: object
      properties:
        id:
          type: string
        parent_id:
          type: string
        key:
          type: string
        value:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Gateway schemas
    Gateway:
      type: object
      properties:
        id:
          type: string
        org_id:
          type: string
        psp_id:
          type: string
        name:
          type: string
        settings:
          type: object
          description: Payment provider specific settings
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateGatewayRequest:
      type: object
      required:
        - psp_id
        - name
        - settings
      properties:
        psp_id:
          type: string
          description: Payment service provider ID (e.g., 'paystack', 'checkout_com')
        name:
          type: string
          description: Friendly name for the gateway
        settings:
          type: object
          description: Provider-specific configuration settings
        is_active:
          type: boolean
          default: true

    UpdateGatewayRequest:
      type: object
      properties:
        name:
          type: string
        settings:
          type: object
          description: Provider-specific configuration settings
        is_active:
          type: boolean

    # API Key schemas
    ApiKey:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        prefix:
          type: string
          description: First few characters of the API key for identification
        scopes:
          type: array
          items:
            type: string
        expires_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        last_used_at:
          type: string
          format: date-time
          nullable: true

    # Subscription activation schemas
    ActivateSubscriptionRequest:
      type: object
      properties:
        trial_end:
          type: string
          format: date-time
          description: Optional trial end date
        billing_cycle_anchor:
          type: string
          format: date-time
          description: Optional billing cycle anchor date

    # Usage schemas
    UsageEvent:
      type: object
      required:
        - customer_id
        - subscription_item_id
        - event_type
        - quantity
      properties:
        customer_id:
          type: string
        subscription_item_id:
          type: string
        event_type:
          type: string
          description: Type of usage event
        quantity:
          type: number
          description: Quantity of usage
        timestamp:
          type: string
          format: date-time
        idempotency_key:
          type: string
          description: Unique key to prevent duplicate events

    UsageEstimate:
      type: object
      properties:
        subscription_id:
          type: string
        estimated_amount:
          type: integer
          description: Estimated cost in cents
        current_usage:
          type: object
          description: Current usage metrics
        billing_period:
          type: string
          description: Current billing period

    # Public Payment Schemas
    PublicPaymentDetailsResponse:
      type: object
      required:
        - type
        - payment_config
        - org_id
      properties:
        type:
          type: string
          enum: [invoice, checkout]
          description: Type of payment link
        invoice:
          $ref: '#/components/schemas/PublicInvoiceResponse'
          description: Invoice details (only present when type is 'invoice')
        checkout_items:
          type: object
          description: Checkout items (only present when type is 'checkout')
        payment_config:
          type: object
          description: Payment configuration for this payment link
        org_id:
          type: string
          description: Organization ID

    PublicInvoiceResponse:
      type: object
      required:
        - id
        - doc_number
        - total
        - amount_due
        - currency
        - line_items
      properties:
        id:
          type: string
          description: Invoice ID
        doc_number:
          type: string
          description: Invoice document number
        total:
          type: integer
          description: Total invoice amount in cents
        amount_due:
          type: string
          description: Amount due as formatted string
        currency:
          type: string
          description: Currency code (ISO 4217)
        due_at:
          type: string
          format: date
          nullable: true
          description: Due date for the invoice (YYYY-MM-DD format)
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/PublicInvoiceLineItem'
          description: Invoice line items
        customer:
          $ref: '#/components/schemas/PublicCustomerResponse'
          nullable: true
          description: Customer information (may be null if not available)

    PublicInvoiceLineItem:
      type: object
      required:
        - description
        - quantity
        - unit_price
        - line_total
      properties:
        description:
          type: string
          description: Line item description
        quantity:
          type: string
          description: Quantity as formatted string
        unit_price:
          type: integer
          description: Unit price in cents
        line_total:
          type: integer
          description: Line total in cents

    PublicCustomerResponse:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Customer email address
        first_name:
          type: string
          description: Customer first name
        last_name:
          type: string
          description: Customer last name
        billing_address:
          $ref: '#/components/schemas/Address'
          description: Customer billing address

    PublicCreateOrderRequest:
      type: object
      required:
        - payment_processor
      properties:
        payment_processor:
          type: string
          description: Payment processor to use (e.g., 'paystack', 'checkout')
        customer_email:
          type: string
          format: email
          description: Customer email address
        customer_name:
          type: string
          description: Customer name
        billing_address:
          $ref: '#/components/schemas/Address'
          description: Billing address for the order
        success_url:
          type: string
          format: uri
          description: URL to redirect to on successful payment
        cancel_url:
          type: string
          format: uri
          description: URL to redirect to on cancelled payment
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional metadata for the order

    PublicOrderResponse:
      type: object
      required:
        - order_id
        - payment_processor
        - reference
        - amount
        - currency
        - status
      properties:
        order_id:
          type: string
          description: Created order ID
        payment_processor:
          type: string
          description: Payment processor being used
        redirect_url:
          type: string
          format: uri
          description: URL to redirect customer for payment (when using hosted payment pages)
        client_secret:
          type: string
          description: Client secret for client-side payment processing
        session_id:
          type: string
          description: Payment session ID
        reference:
          type: string
          description: Payment reference number
        amount:
          type: integer
          description: Order amount in cents
        currency:
          type: string
          description: Currency code (ISO 4217)
        status:
          type: string
          description: Order status

    PublicOrderStatusResponse:
      type: object
      required:
        - order_id
        - status
        - amount
        - currency
      properties:
        order_id:
          type: string
          description: Order ID
        status:
          type: string
          description: Order status
        payment_status:
          type: string
          description: Payment status (when available)
        amount:
          type: integer
          description: Order amount in cents
        currency:
          type: string
          description: Currency code (ISO 4217)